<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Sprint;

/**
 * IssueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IssueRepository extends \Doctrine\ORM\EntityRepository
{
    public function getNonAdded(Sprint $sprint)
    {
        $qb = $this->createQueryBuilder('i');
        $qb
            ->andWhere($qb->expr()->eq('i.sprint', $sprint->getId()))
            ->andWhere($qb->expr()->eq('i.added', 0))
            ->orderBy('i.completed', 'asc')
            ->addOrderBy('i.created', 'desc')
        ;

        return $qb->getQuery()->getResult();
    }

    public function getAdded(Sprint $sprint)
    {
        $qb = $this->createQueryBuilder('i');
        $qb
            ->andWhere($qb->expr()->eq('i.sprint', $sprint->getId()))
            ->andWhere($qb->expr()->eq('i.added', 1))
            ->orderBy('i.completed', 'asc')
            ->addOrderBy('i.created', 'desc')
        ;

        return $qb->getQuery()->getResult();
    }

    public function countTotalComplexity(Sprint $sprint, $onlyCompleted = false, $added = false)
    {
        $qb = $this->createQueryBuilder('i');
        $qb
            ->select('SUM(i.complexity)')
            ->andWhere($qb->expr()->eq('i.sprint', $sprint->getId()))
            ->andWhere($qb->expr()->eq('i.added', $added ? 1 : 0))
        ;

        if ($onlyCompleted) {
            $qb->andWhere($qb->expr()->eq('i.completed', 1));
        }

        return current($qb->getQuery()->getSingleResult()) ?: 0;
    }
}
